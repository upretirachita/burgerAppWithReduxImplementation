{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nabin\\\\Desktop\\\\udemyPractide\\\\burgerAPP\\\\my-app\\\\src\\\\containers\\\\Checkout\\\\Contactdata\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axiosOrder';\nimport Input from '../../../components/UI/Input/Input';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: true\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: ''\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'zipCode'\n          },\n          value: ''\n        },\n        city: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'City'\n          },\n          value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault(); //console.log(\"fromContacdata\",this.props.ingredients);\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.handleChange = function (e, inputIdentifier) {\n      console.log(\"input from contact\", e.target.value);\n\n      var updateOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updateOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = e.target.value;\n      updateOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updateOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, formElementArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          handleChange: function handleChange(e) {\n            return _this2.handleChange(e, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"ContactData\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Enter Your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["C:\\Users\\Nabin\\Desktop\\udemyPractide\\burgerAPP\\my-app\\src\\containers\\Checkout\\Contactdata\\ContactData.js"],"names":["React","Component","Button","Spinner","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","street","zipCode","city","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","handleChange","e","inputIdentifier","console","log","target","updateOrderForm","updatedFormElement","formElementArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport axios from '../../../axiosOrder';\r\nimport Input from '../../../components/UI/Input/Input';\r\n\r\nclass ContactData extends Component{\r\n    state = {\r\n        orderForm: {\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Name'\r\n                    },\r\n                    value:'',\r\n                    validation:true\r\n                    },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Street'\r\n                    },\r\n                    value:''\r\n                    },\r\n                zipCode:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'zipCode'\r\n                    },\r\n                    value:''\r\n                    },\r\n                city:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'City'\r\n                    },\r\n                    value:''\r\n                    },\r\n                email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Your Email'\r\n                    },\r\n                    value:''\r\n                    },\r\n                deliveryMethod:{\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options: [\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:''\r\n                    }\r\n        },\r\n        loading:false\r\n    }\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        //console.log(\"fromContacdata\",this.props.ingredients);\r\n        this.setState({loading:true});\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value ;\r\n        }\r\n\r\n         const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            orderData: formData \r\n            }\r\n            axios.post('/orders.json',order)\r\n                .then(response=> {\r\n                    this.setState({\r\n                        loading:false\r\n                        });\r\n                    this.props.history.push('/');\r\n                    })\r\n\r\n                .catch(error=>{\r\n                    this.setState({loading:false\r\n                    });\r\n             });\r\n    }\r\n    handleChange = (e , inputIdentifier) => {\r\n        console.log(\"input from contact\",e.target.value);\r\n        const updateOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n           ...updateOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = e.target.value;\r\n        updateOrderForm[inputIdentifier] = updatedFormElement ;\r\n        this.setState({\r\n            orderForm:updateOrderForm\r\n        });\r\n    }\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit = {this.orderHandler}>\r\n                    {formElementArray.map(formElement =>(\r\n                        <Input \r\n                        key = {formElement.id}\r\n                        elementType = {formElement.config.elementType}\r\n                        elementConfig = {formElement.config.elementConfig} \r\n                        value = {formElement.config.value} \r\n                        handleChange = {(e) => this.handleChange(e,formElement.id)}/>\r\n                    ))}\r\n                   <Button btnType=\"Success\" >ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.state.loading){\r\n            form = <Spinner />\r\n        }\r\n        return(\r\n            <div className=\"ContactData\">\r\n                <h4>Enter Your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}